{"version":3,"sources":["components/Note.js","components/Notification.js","components/Footer.js","services/notes.js","components/App.js","index.js"],"names":["Note","toggleImportance","note","label","important","content","onClick","Notification","message","className","Footer","style","color","fontStyle","fontSize","baseUrl","axios","get","then","response","data","newObject","post","id","put","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","noteObjects","notesToShow","filter","find","changedNote","noteObject","map","catch","error","setTimeout","key","onSubmit","event","preventDefault","date","Date","toISOString","Math","random","length","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"2NAYeA,EAVF,SAAC,GAAgC,IAA9BC,EAA6B,EAA7BA,iBAAkBC,EAAW,EAAXA,KAC1BC,EAAQD,EAAKE,UAAY,qBAAuB,iBACtD,OACE,4BACGF,EAAKG,QACN,4BAAQC,QAASL,GAAmBE,KCG3BI,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAgB,OAAZA,EACK,KAGF,yBAAKC,UAAU,SAASD,ICYlBE,EAjBA,WAOb,OACE,yBAAKC,MAPa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAKR,6BACA,uG,gBCVAC,EAAU,8BAiBD,EAfA,WAEb,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,S,8NCV3C,IAqFeK,EArFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,IAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAAqBlB,MAAK,SAAAmB,GACxBT,EAASS,QAEV,IAEH,IAAMC,EAAcP,EAAUJ,EAAQA,EAAMY,QAAO,SAAArC,GAAI,OAAIA,EAAKE,aAE1DH,EAAmB,SAAAsB,GACvB,IAAMrB,EAAOyB,EAAMa,MAAK,SAAAtC,GAAI,OAAIA,EAAKqB,KAAOA,KACtCkB,E,yVAAW,IAAQvC,EAAR,CAAcE,WAAYF,EAAKE,YAEhDgC,EACUb,EAAIkB,GACXvB,MAAK,SAAAwB,GACJd,EAASD,EAAMgB,KAAI,SAAAzC,GAAI,OAAKA,EAAKqB,KAAOA,EAAKrB,EAAOwC,SAErDE,OAAM,SAAAC,GACLX,EAAgB,SAAD,OACJhC,EAAKG,QADD,sCAGfyC,YAAW,WACTZ,EAAgB,QACf,KAEHN,EAASD,EAAMY,QAAO,SAAArC,GAAI,OAAIA,EAAKqB,KAAOA,UAgChD,OACE,6BACE,qCAECU,EAAe,kBAAC,EAAD,CAAczB,QAASyB,IAAmB,GAE1D,6BACE,4BAAQ3B,QAAS,kBAAM0B,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAtCFO,EAAYK,KAAI,SAAAzC,GAAI,OAClB,kBAAC,EAAD,CACED,iBAAkB,kBAAMA,EAAiBC,EAAKqB,KAC9CwB,IAAK7C,EAAKqB,GACVrB,KAAMA,QAmCR,0BAAM8C,SA3BM,SAAAC,GACdA,EAAMC,iBACN,IAAMR,EAAa,CACjBrC,QAASwB,EACTsB,MAAM,IAAIC,MAAOC,cACjBjD,UAAWkD,KAAKC,SAAW,GAC3BhC,GAAII,EAAM6B,OAAS,GAGrBpB,EAAmBM,GAAYxB,MAAK,SAAAwB,GAClCd,EAASD,EAAM8B,OAAOf,IACtBZ,EAAW,SAiBT,2BAAO4B,MAAO7B,EAAS8B,SAhCJ,SAAAV,GACvBnB,EAAWmB,EAAMW,OAAOF,UAgCpB,4BAAQG,KAAK,UAAb,SAGF,kBAAC,EAAD,QCjFNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.b6489d7d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Note = ({ toggleImportance, note }) => {\r\n  const label = note.important ? \"make not important\" : \"make important\";\r\n  return (\r\n    <li>\r\n      {note.content}\r\n      <button onClick={toggleImportance}>{label}</button>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React from \"react\";\r\n\r\nconst Notification = ({ message }) => {\r\n  if (message === null) {\r\n    return null;\r\n  }\r\n\r\n  return <div className=\"error\">{message}</div>;\r\n};\r\n\r\nexport default Notification;\r\n","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  const footerStyle = {\r\n    color: \"green\",\r\n    fontStyle: \"italic\",\r\n    fontSize: 16\r\n  };\r\n\r\n  return (\r\n    <div style={footerStyle}>\r\n      <br />\r\n      <em>\r\n        Note app, Department of Computer Science, University of Helsinki 2019\r\n      </em>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import axios from \"axios\";\r\n\r\nconst baseUrl = \"http://localhost:3001/notes\";\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  return request.then(response => response.data); // trả về 1 promises. Nếu promise này dùng then thì response.data sẽ là tham số truyền vào\r\n};\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then(response => response.data);\r\n};\r\n\r\nexport default {\r\n  getAll,\r\n  create,\r\n  update\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Note from \"./Note\";\r\nimport Notification from \"./Notification\";\r\nimport Footer from \"./Footer\";\r\nimport noteService from \"../services/notes\";\r\n\r\nconst App = () => {\r\n  const [notes, setNotes] = useState([]);\r\n  const [newNote, setNewNote] = useState(\"\");\r\n  const [showAll, setShowAll] = useState(true);\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    noteService.getAll().then(noteObjects => {\r\n      setNotes(noteObjects);\r\n    });\r\n  }, []);\r\n\r\n  const notesToShow = showAll ? notes : notes.filter(note => note.important);\r\n\r\n  const toggleImportance = id => {\r\n    const note = notes.find(note => note.id === id);\r\n    const changedNote = { ...note, important: !note.important };\r\n\r\n    noteService\r\n      .update(id, changedNote)\r\n      .then(noteObject => {\r\n        setNotes(notes.map(note => (note.id !== id ? note : noteObject)));\r\n      })\r\n      .catch(error => {\r\n        setErrorMessage(\r\n          `Note '${note.content}' was already removed from server`\r\n        );\r\n        setTimeout(() => {\r\n          setErrorMessage(null);\r\n        }, 5000);\r\n        // remove error notes\r\n        setNotes(notes.filter(note => note.id !== id));\r\n      });\r\n  };\r\n\r\n  const rows = () =>\r\n    notesToShow.map(note => (\r\n      <Note\r\n        toggleImportance={() => toggleImportance(note.id)}\r\n        key={note.id}\r\n        note={note}\r\n      />\r\n    ));\r\n\r\n  const handleNoteChange = event => {\r\n    setNewNote(event.target.value);\r\n  };\r\n\r\n  const addNote = event => {\r\n    event.preventDefault();\r\n    const noteObject = {\r\n      content: newNote,\r\n      date: new Date().toISOString(),\r\n      important: Math.random() > 0.5,\r\n      id: notes.length + 1\r\n    };\r\n\r\n    noteService.create(noteObject).then(noteObject => {\r\n      setNotes(notes.concat(noteObject));\r\n      setNewNote(\"\");\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Notes</h1>\r\n\r\n      {errorMessage ? <Notification message={errorMessage} /> : \"\"}\r\n\r\n      <div>\r\n        <button onClick={() => setShowAll(!showAll)}>\r\n          show {showAll ? \"important\" : \"all\"}\r\n        </button>\r\n      </div>\r\n      <ul>{rows()}</ul>\r\n      <form onSubmit={addNote}>\r\n        <input value={newNote} onChange={handleNoteChange} />\r\n        <button type=\"submit\">save</button>\r\n      </form>\r\n\r\n      <Footer />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './index.css';\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}